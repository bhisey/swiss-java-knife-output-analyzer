{"ast":null,"code":"var _jsxFileName = \"/Users/swapnilbhisey/github/jvm-thread-visualizer/src/components/HeapAllocChart.tsx\";\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HeapAllocChart = ({\n  data,\n  darkMode,\n  selectedTimeRange,\n  onTimeRangeChange\n}) => {\n  // Calculate brush indices from selectedTimeRange\n  let brushStart = 0;\n  let brushEnd = data.length - 1;\n  if (selectedTimeRange && data.length > 0) {\n    brushStart = data.findIndex(d => d.timestamp >= selectedTimeRange[0].getTime());\n    brushEnd = data.findIndex(d => d.timestamp >= selectedTimeRange[1].getTime());\n    if (brushStart === -1) brushStart = 0;\n    if (brushEnd === -1) brushEnd = data.length - 1;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-96\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: `text-xl font-semibold mb-4 ${darkMode ? 'text-gray-100' : 'text-gray-900'}`,\n      children: \"Heap Allocation Rate Over Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: \"85%\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: data,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 40,\n          bottom: 40\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\",\n          stroke: darkMode ? '#444' : '#ccc'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"timestamp\",\n          tickFormatter: timestamp => new Date(timestamp).toLocaleTimeString(),\n          stroke: darkMode ? '#ccc' : '#333'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          label: {\n            value: 'Allocation Rate (MB/s)',\n            angle: -90,\n            position: 'insideLeft',\n            fill: darkMode ? '#ccc' : '#333'\n          },\n          tickFormatter: value => (value / (1024 * 1024)).toFixed(2),\n          stroke: darkMode ? '#ccc' : '#333',\n          domain: [0, Math.max(...data.map(d => d.heapAllocRate / (1024 * 1024))) * 1.1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          contentStyle: {\n            background: darkMode ? '#222' : '#fff',\n            color: darkMode ? '#fff' : '#222'\n          },\n          labelFormatter: timestamp => new Date(timestamp).toLocaleString(),\n          formatter: value => [`${(value / (1024 * 1024)).toFixed(2)} MB/s`, 'Allocation Rate']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {\n          wrapperStyle: {\n            color: darkMode ? '#ccc' : '#333'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"heapAllocRate\",\n          stroke: \"#82ca9d\",\n          activeDot: {\n            r: 8\n          },\n          dot: {\n            r: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Brush, {\n          dataKey: \"timestamp\",\n          height: 30,\n          stroke: \"#82ca9d\",\n          tickFormatter: timestamp => new Date(timestamp).toLocaleTimeString(),\n          startIndex: brushStart,\n          endIndex: brushEnd,\n          onChange: range => {\n            if (onTimeRangeChange && range && typeof range.startIndex === 'number' && typeof range.endIndex === 'number') {\n              onTimeRangeChange(range.startIndex, range.endIndex);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_c = HeapAllocChart;\nvar _c;\n$RefreshReg$(_c, \"HeapAllocChart\");","map":{"version":3,"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Brush","jsxDEV","_jsxDEV","HeapAllocChart","data","darkMode","selectedTimeRange","onTimeRangeChange","brushStart","brushEnd","length","findIndex","d","timestamp","getTime","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","stroke","dataKey","tickFormatter","Date","toLocaleTimeString","label","value","angle","position","fill","toFixed","domain","Math","max","map","heapAllocRate","contentStyle","background","color","labelFormatter","toLocaleString","formatter","wrapperStyle","type","activeDot","r","dot","startIndex","endIndex","onChange","range","_c","$RefreshReg$"],"sources":["/Users/swapnilbhisey/github/jvm-thread-visualizer/src/components/HeapAllocChart.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Brush,\n} from 'recharts';\nimport { ProcessSummary } from '../utils/parser.ts';\n\ninterface HeapAllocChartProps {\n  data: ProcessSummary[];\n  darkMode?: boolean;\n  selectedTimeRange?: [Date, Date];\n  onTimeRangeChange?: (startIndex: number, endIndex: number) => void;\n}\n\nexport const HeapAllocChart: React.FC<HeapAllocChartProps> = ({ data, darkMode, selectedTimeRange, onTimeRangeChange }) => {\n  // Calculate brush indices from selectedTimeRange\n  let brushStart = 0;\n  let brushEnd = data.length - 1;\n  if (selectedTimeRange && data.length > 0) {\n    brushStart = data.findIndex(d => d.timestamp >= selectedTimeRange[0].getTime());\n    brushEnd = data.findIndex(d => d.timestamp >= selectedTimeRange[1].getTime());\n    if (brushStart === -1) brushStart = 0;\n    if (brushEnd === -1) brushEnd = data.length - 1;\n  }\n\n  return (\n    <div className=\"h-96\">\n      <h2 className={`text-xl font-semibold mb-4 ${darkMode ? 'text-gray-100' : 'text-gray-900'}`}>Heap Allocation Rate Over Time</h2>\n      <ResponsiveContainer width=\"100%\" height=\"85%\">\n        <LineChart\n          data={data}\n          margin={{\n            top: 20,\n            right: 30,\n            left: 40,\n            bottom: 40,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" stroke={darkMode ? '#444' : '#ccc'} />\n          <XAxis\n            dataKey=\"timestamp\"\n            tickFormatter={(timestamp) => new Date(timestamp).toLocaleTimeString()}\n            stroke={darkMode ? '#ccc' : '#333'}\n          />\n          <YAxis\n            label={{ value: 'Allocation Rate (MB/s)', angle: -90, position: 'insideLeft', fill: darkMode ? '#ccc' : '#333' }}\n            tickFormatter={(value) => (value / (1024 * 1024)).toFixed(2)}\n            stroke={darkMode ? '#ccc' : '#333'}\n            domain={[0, Math.max(...data.map(d => d.heapAllocRate / (1024 * 1024))) * 1.1]}\n          />\n          <Tooltip\n            contentStyle={{ background: darkMode ? '#222' : '#fff', color: darkMode ? '#fff' : '#222' }}\n            labelFormatter={(timestamp) => new Date(timestamp).toLocaleString()}\n            formatter={(value: number) => [`${(value / (1024 * 1024)).toFixed(2)} MB/s`, 'Allocation Rate']}\n          />\n          <Legend wrapperStyle={{ color: darkMode ? '#ccc' : '#333' }} />\n          <Line\n            type=\"monotone\"\n            dataKey=\"heapAllocRate\"\n            stroke=\"#82ca9d\"\n            activeDot={{ r: 8 }}\n            dot={{ r: 2 }}\n          />\n          <Brush\n            dataKey=\"timestamp\"\n            height={30}\n            stroke=\"#82ca9d\"\n            tickFormatter={(timestamp) => new Date(timestamp).toLocaleTimeString()}\n            startIndex={brushStart}\n            endIndex={brushEnd}\n            onChange={(range) => {\n              if (onTimeRangeChange && range && typeof range.startIndex === 'number' && typeof range.endIndex === 'number') {\n                onTimeRangeChange(range.startIndex, range.endIndex);\n              }\n            }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}